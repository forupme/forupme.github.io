var tipuesearch = {"pages": [{'title': 'About', 'text': '這裡是\xa0ENG 工程網站: \n 本網站 UR:  https://eng.nfu.edu.tw \xa0 \n 本網站倉儲:  https://github.com/forupme/forupme.github.io', 'tags': '', 'url': 'About.html'}, {'title': 'MISC', 'text': 'Fossil SCM \n 網際伺服器: \n Windows: fossil server C:\\pj2022\\repo\\pj2022.fossil --port 9000 --https \n Ubuntu: fossil http /home/pj2022/repository/pj2022.fossil --https --nojail \n fossiloauth \n config.py \n 針對單一倉儲檔案 fossiloauth 中 config.py 設定:\n\nimport authomatic\nfrom authomatic.providers import oauth2\n\n# read client_id and client_secret from safe place other than put into script\nkeyFile = open(\'./../pme_eng_secret.txt\', \'r\')\nwith open(\'./../pme_eng_secret.txt\', \'r\') as f:\n    key = f.read().splitlines()\n\nCONFIG = {\n        \'google\': {\n            \'class_\': oauth2.Google,\n            \'consumer_key\': key[0],\n            \'consumer_secret\': key[1],\n            \'scope\': oauth2.Google.user_info_scope\n        }\n    }\n\ndomain_name = "pme.eng.nfu.edu.tw"\ndefault_repo = "pme"\nrepo_caps = "bfjk234C"\n# for Windows \nrepo_path = "c:/pj2022/repo/"\n# for Ubuntu\n#repo_path = "/home/wcm2021/repository/"\nfossil_port = "443"\nflask_port = "8443"\nuwsgi = True\n\n# derived\ndefault_repo_path = repo_path+default_repo+".fossil"\nflask_url = "https://"+domain_name+":"+flask_port\nflask_forum = "https://"+domain_name+":"+flask_port+"/forum"\n# for multiple repository\n#login_url = "https://"+domain_name+":"+fossil_port+"/"+default_repo+"/login"\n# for single repository\nlogin_url = "https://"+domain_name+":"+fossil_port+"/login"\n# for multiple repository\n#forum_url = "https://"+domain_name+":"+fossil_port+"/"+default_repo+"/forum"\n# for single repository\nforum_url = "https://"+domain_name+":"+fossil_port+"/forum"\nCALLBACK_URL = flask_forum\n \n setup \n Authorised JavaScript origins \n URIs: \n https://pme.eng.nfu.edu.tw:8443 \n Authorised redirect URIs \n https://pme.eng.nfu.edu.tw:8443/login/google/ \n', 'tags': '', 'url': 'MISC.html'}, {'title': 'GW', 'text': 'Google Workspace 應用: \n https://edu.google.com/intl/ALL_tw/workspace-for-education/editions/overview/ \xa0 \n 使用 Python + Flask 建立一個網頁介面，讓管理員透過網頁表單自動在 Google Workspace（前 G Suite）中建立新的 email address（即新增用戶）。 必備條件: 1. Google Workspace 管理員權限：你必須擁有管理員帳號才能新增使用者。 2. Google Cloud Platform 專案：你需要在 GCP 建立一個專案並啟用 [Admin SDK API](https://console.developers.google.com/apis/library/admin.googleapis.com)。 3. 建立服務帳戶（Service Account）並授權 Domain-wide Delegation：這樣 Flask 應用就能以管理員身分進行操作。 4. 下載服務帳戶金鑰（JSON）：Flask 會用這個來驗證。 5. 設定 Google Workspace 的管理員 Email：Flask 會用於 impersonate。 安裝模組: \n pip install flask google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2 \n 範例程式: \n from flask import Flask, request, render_template_string\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\n\napp = Flask(__name__)\n\n# 服務帳戶金鑰路徑\nSERVICE_ACCOUNT_FILE = \'path/to/your/service-account.json\'\n# 管理員 email\nADMIN_EMAIL = \'admin@yourdomain.com\'\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    msg = \'\'\n    if request.method == \'POST\':\n        user_email = request.form[\'email\']\n        password = request.form[\'password\']\n        first_name = request.form[\'first_name\']\n        last_name = request.form[\'last_name\']\n        # 建立新使用者\n        result = create_google_user(user_email, password, first_name, last_name)\n        msg = \'帳號建立成功\' if result else \'建立失敗\'\n    return render_template_string("""\n        <form method="post">\n            Email: <input name="email"><br>\n            密碼: <input name="password"><br>\n            名: <input name="first_name"><br>\n            姓: <input name="last_name"><br>\n            <button type="submit">建立</button>\n        </form>\n        <p>{{ msg }}</p>\n    """, msg=msg)\n\ndef create_google_user(email, password, first_name, last_name):\n    SCOPES = [\'https://www.googleapis.com/auth/admin.directory.user\']\n    creds = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES)\n    delegated_creds = creds.with_subject(ADMIN_EMAIL)\n    service = build(\'admin\', \'directory_v1\', credentials=delegated_creds)\n    user_info = {\n        "primaryEmail": email,\n        "password": password,\n        "name": {\n            "givenName": first_name,\n            "familyName": last_name\n        }\n    }\n    try:\n        service.users().insert(body=user_info).execute()\n        return True\n    except Exception as e:\n        print(e)\n        return False\n\nif __name__ == \'__main__\':\n    app.run(debug=True) \n 注意事項: 1. 服務帳戶要開啟「網域範圍授權」（Domain-wide Delegation），管理員要在 Google Workspace 控制台授權該服務帳戶操作指定的範圍。 3. 密碼建議強度：可以加強密碼生成與驗證。 4. 部署建議：請勿將服務帳戶金鑰暴露於公開網路。 5. 安全性：建議加入認證機制，避免未授權使用。', 'tags': '', 'url': 'GW.html'}, {'title': 'Reeborg', 'text': 'https://eng.nfu.edu.tw/reeborg \xa0 \n', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};